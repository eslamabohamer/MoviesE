
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lthvzwceoiyyvwnquggs.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx0aHZ6d2Nlb2l5eXZ3bnF1Z2dzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwMjA1MjIsImV4cCI6MjA1ODU5NjUyMn0.4uqqcb61DvvW71zLzv5U7KZrOtIE6q8xVbc9_LLda3U";

// The TMDB API v3 key - make sure this is valid
export const TMDB_API_KEY = "7dae1ed94f4ca9eea90e0bec4efbddf3";
export const TMDB_BASE_URL = "https://api.themoviedb.org/3";

// Helper function to get TMDB image URLs with the right size
export const getTmdbImageUrl = (path: string | null, size: string = 'w500'): string => {
  if (!path) return "https://via.placeholder.com/500x750?text=No+Image";
  return `https://image.tmdb.org/t/p/${size}${path}`;
};

// Create a supabase client with typed database schema
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true
    }
  }
);

// Function to check if a user is an admin (client-side version)
export const isUserAdmin = async (userId: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .rpc('is_user_admin', { user_id: userId });
    
    if (error) {
      console.error('Error checking admin status:', error);
      return false;
    }
    
    return data === true;
  } catch (error) {
    console.error('Exception checking admin status:', error);
    return false;
  }
};

// Function to update a user (bypassing RLS via RPC)
export const updateUserSafe = async (
  userId: string, 
  updates: { username?: string; role?: 'admin' | 'user' }
): Promise<boolean> => {
  try {
    // Use any type to bypass TypeScript's strict checking of RPC function names
    // This is necessary because the function was just created and isn't in the generated types yet
    const { data, error } = await supabase.rpc('update_user_safe' as any, { 
      user_id: userId,
      new_username: updates.username,
      new_role: updates.role
    });
    
    if (error) {
      console.error('Error updating user:', error);
      return false;
    }
    
    return data === true;
  } catch (error) {
    console.error('Exception updating user:', error);
    return false;
  }
};

// Function to delete a user (bypassing RLS via RPC)
export const deleteUserSafe = async (userId: string): Promise<boolean> => {
  try {
    // Use any type to bypass TypeScript's strict checking of RPC function names
    // This is necessary because the function was just created and isn't in the generated types yet
    const { data, error } = await supabase.rpc('delete_user_safe' as any, { 
      user_id: userId 
    });
    
    if (error) {
      console.error('Error deleting user:', error);
      return false;
    }
    
    return data === true;
  } catch (error) {
    console.error('Exception deleting user:', error);
    return false;
  }
};
